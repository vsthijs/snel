module x86 {

    $if($is_x86_64)
        const is_x86: bool = true;
        const is_x86_64: bool = true;

        type uint = u64;
        type sint = i64;
        type fint = f64;
        type uptr = &any;
    $elif($is_x86)
        const is_x86: bool = true;
        const is_x86_64: bool = false;

        type uint = u32;
        type sint = i32;
        type fint = f32;
        type uptr = &any;
    $else
        const is_x86: bool = false;
        const is_x86_64: bool = false;
    $endif

    enum Register {
        rax, eax, ax,
        rbx, ebx, bx,
        rcx, ecx, cx,
        rdx, edx, dx,
        rsi, esi, si,
        rdi, edi, di,
        rsp, esp, sp,
        rbp, ebp, bp,
        r8, r8d, r8w,
        r9, r9d, r9w,
        r10, r10d, r10w,
        r11, r11d, r11w,
        r12, r12d, r12w,
        r13, r13d, r13w,
        r14, r14d, r14w,
        r15, r15d, r15w,
    }

    type Destination {
        register: Register,
        address: uptr,
    } {
        fn is_register() bool;
        fn is_address() bool;
        fn get_register() !Register;
        fn get_address() !uptr;
    }

    /* mov [dst], [src] */
    asm fn mov_r(dst: Register, src: Register);
    
    /* mov [dst], src */
    asm fn mov_u8(dst: Register, src: u8);
    asm fn mov_u16(dst: Register, src: u16);
    asm fn mov_u32(dst: Register, src: u32);
    asm fn mov_u64(dst: Register, src: u64);

    /* push [src] */
    asm fn push(src: Register);

    $if($is_x86_64)
        /* push src */
        asm fn push(src: uint);
        
        asm fn pop() uint;
    $elif($is_x86)
        /* push src */
        asm fn push(src: uint);
        
        asm fn pop(dst: Register);

        /*  */
    $endif
}